(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{536:function(v,_,t){"use strict";t.r(_);var a=t(71),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[v._v("#")]),v._v(" 正则表达式")]),v._v(" "),t("h2",{attrs:{id:"元字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[v._v("#")]),v._v(" 元字符")]),v._v(" "),t("blockquote",[t("p",[v._v("指在正则表达式中有特殊意义的专用字符,构成正则表达式的基本元件")])]),v._v(" "),t("h3",{attrs:{id:"记忆和分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记忆和分类"}},[v._v("#")]),v._v(" 记忆和分类")]),v._v(" "),t("p",[t("strong",[v._v("分类")])]),v._v(" "),t("ul",[t("li",[v._v("特殊单字符\n"),t("ul",[t("li",[v._v(". 任意字符（换行除外）")]),v._v(" "),t("li",[v._v("\\d任意数字 \\D任意非数字")]),v._v(" "),t("li",[v._v("\\w任意字母数字下划线 \\W任意非字母数字下划线")]),v._v(" "),t("li",[v._v("\\s任意空白符 \\S任意非空白符")])])]),v._v(" "),t("li",[v._v("空白符\n"),t("ul",[t("li",[v._v("\\r 回车符")]),v._v(" "),t("li",[v._v("\\n 换行符 （windows 中 \\r\\n linux和mac \\n）")]),v._v(" "),t("li",[v._v("\\f 换页符")]),v._v(" "),t("li",[v._v("\\t 制表符")]),v._v(" "),t("li",[v._v("\\v 垂直制表符")]),v._v(" "),t("li",[v._v("\\s 任意空白符")])])]),v._v(" "),t("li",[v._v("范围\n"),t("ul",[t("li",[v._v("｜ 或，如ab ｜ bc 代表ab或bc")]),v._v(" "),t("li",[v._v("[...] 括号中任意单个元素")]),v._v(" "),t("li",[v._v("[a-z] a到z任意单个元素，按ASCII表")]),v._v(" "),t("li",[v._v("[^...] 取反不能是括号中任意单个元素")])])]),v._v(" "),t("li",[v._v("量词\n"),t("ul",[t("li",[v._v("* 0到多次")]),v._v(" "),t("li",[v._v("+ 1到多次")]),v._v(" "),t("li",[v._v("？ 0到1次")]),v._v(" "),t("li",[v._v("{m} 出现m次")]),v._v(" "),t("li",[v._v("{m,} 出现至少m次")]),v._v(" "),t("li",[v._v("{m,n} 出现m到n次")])])]),v._v(" "),t("li",[v._v("断言")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"量词的贪婪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#量词的贪婪"}},[v._v("#")]),v._v(" 量词的贪婪")]),v._v(" "),t("h3",{attrs:{id:"贪婪模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[v._v("#")]),v._v(" 贪婪模式")]),v._v(" "),t("p",[v._v("特点：尽可能进行最大长度的匹配")]),v._v(" "),t("p",[v._v("回溯：后面匹配不上会吐出已匹配的再次尝试")]),v._v(" "),t("h3",{attrs:{id:"非贪婪模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪模式"}},[v._v("#")]),v._v(" 非贪婪模式")]),v._v(" "),t("p",[v._v("“数量”元字符后加？找出长度最小且满足要求即可")]),v._v(" "),t("p",[v._v("回溯：后面匹配不上会吐出已匹配的再次尝试")]),v._v(" "),t("h3",{attrs:{id:"独占模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#独占模式"}},[v._v("#")]),v._v(" 独占模式")]),v._v(" "),t("p",[v._v("“数量”元字符后加+ 满足要求情况下尽可能进行最大长度的匹配")]),v._v(" "),t("p",[v._v("不进行回溯，如果匹配不上即失败")]),v._v(" "),t("hr"),v._v(" "),t("p",[t("a",{attrs:{href:"https://regex101.com/r/PnzZ4k/1",title:"测试地址",target:"_blank",rel:"noopener noreferrer"}},[v._v("正则测试地址"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);